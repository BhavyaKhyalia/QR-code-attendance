# -*- coding: utf-8 -*-
"""Qrcode_attendence.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vLfNORLv0bZEdrko7IpHA3dAxPJ_P1Jg
"""

!pip install opencv-python==4.6.0.66

!pip install matplotlib==3.7.1
!pip install numpy==1.25.0

!pip install pyzbar

!apt-get install libzbar0

import os

import cv2
from pyzbar.pyzbar import decode
import matplotlib.pyplot as plt
import numpy as np

img = cv2.imread('/content/Sample.png')

qr_info = decode(img)

for qr in qr_info:
  data = qr.data
  rect = qr.rect
  polygon = qr.polygon

  print(data)
  print(rect)
  print(polygon)

  img = cv2.rectangle(img, (rect.left, rect.top), (rect.left + rect.width, rect.top + rect.height),
                            (0, 255, 0), 5)

  img = cv2.polylines(img, [np.array(polygon)], True, (255, 0, 0), 5)

  plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
  plt.show()

from IPython.display import display, Javascript
from google.colab.output import eval_js
from base64 import b64decode

def take_photo(filename='photo.jpg', quality=0.8):
  js = Javascript('''
    async function takePhoto(quality) {
      const div = document.createElement('div');
      const capture = document.createElement('button');
      capture.textContent = 'Capture';
      div.appendChild(capture);

      const video = document.createElement('video');
      video.style.display = 'block';
      const stream = await navigator.mediaDevices.getUserMedia({video: true});

      document.body.appendChild(div);
      div.appendChild(video);
      video.srcObject = stream;
      await video.play();

      // Resize the output to fit the video element.
      google.colab.output.setIframeHeight(document.documentElement.scrollHeight, true);

      // Wait for Capture to be clicked.
      await new Promise((resolve) => capture.onclick = resolve);

      const canvas = document.createElement('canvas');
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      canvas.getContext('2d').drawImage(video, 0, 0);
      stream.getVideoTracks()[0].stop();
      div.remove();
      return canvas.toDataURL('image/jpeg', quality);
    }
    ''')
  display(js)
  data = eval_js('takePhoto({})'.format(quality))
  binary = b64decode(data.split(',')[1])
  with open(filename, 'wb') as f:
    f.write(binary)
  return filename

from IPython.display import Image
try:
  filename = take_photo()
  print('Saved to {}'.format(filename))

  # Show the image which was just taken.
  display(Image(filename))
except Exception as err:
  # Errors will be thrown if the user does not have a webcam or if they do not
  # grant the page permission to access it.
  print(str(err))

from google.colab.patches import cv2_imshow

import os
import datetime
import time
import pyzbar
import pyzbar.pyzbar as pyzbar
import cv2
from google.colab.patches import cv2_imshow
from pyzbar.pyzbar import decode
import matplotlib.pyplot as plt
import numpy as np

log_path = './log.txt'
authorized_users=['Bhavya','Rahul','Raj']
cap = cv2.imread('/content/photo.jpg')

most_recent_access = {}

time_between_logs_th = 5
qr_info = pyzbar.decode(cv2.cvtColor(cap, cv2.COLOR_BGR2GRAY))
print(qr_info)
if len(qr_info) > 0:
    qr = qr_info[0]
    data = qr.data
    print(data)
if len(qr_info) > 0:

    qr = qr_info[0]

    data = qr.data
    rect = qr.rect
    polygon = qr.polygon

    if data.decode() in authorized_users:
        cv2.putText(cap, 'ACCESS GRANTED', (rect.left, rect.top - 15), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 3)
        if data.decode() not in most_recent_access.keys() \
                or time.time() - most_recent_access[data.decode()] > time_between_logs_th:
            most_recent_access[data.decode()] = time.time()
            with open(log_path, 'a') as f:
                f.write('{},{}\n'.format(data.decode(), datetime.datetime.now()))
                f.close()

    else:
        cv2.putText(cap, 'ACCESS DENIED', (rect.left, rect.top - 15), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 3)

    frame = cv2.rectangle(cap, (rect.left, rect.top), (rect.left + rect.width, rect.top + rect.height),
                            (0, 255, 0), 5)

    frame = cv2.polylines(cap, [np.array(polygon)], True, (255, 0, 0), 5)

cv2_imshow(cap)


cv2.destroyAllWindows()
